#!/usr/bin/env ansible-playbook
---
- name: CloudForms{{ ':' }} LATAM Red Hat Forum 2016
  hosts: localhost
  connection: local
  vars:
     openshift_domain: example.com
     openshift_domain_cloudapps: cloudapps.{{ openshift_domain }}
     username: demo
     password: smartvm
     cloudforms_namespace: cloudforms
     cloudforms_username: admin
     cloudforms_http_type: https
  tasks: 
     - name: Delete any previously existing namespaces 
       command: oc delete project {{ cloudforms_namespace }}
       ignore_errors: True
       tags: 
          - create
          - cleanup

     - name: Create a Project{{ ':' }} {{ cloudforms_namespace }} 
       command: oadm new-project {{ cloudforms_namespace }} --display-name="CloudForms{{ ':' }} LATAM Red Hat Forum 2016" --admin={{ username }}
       register: create_namespace
       until: create_namespace.rc == 0
       retries: 60
       delay: 10
       tags: create

     - name: Allow this pod to run in a Privileged Security Context
       command: oadm policy add-scc-to-user privileged system:serviceaccount:{{ cloudforms_namespace }}:default
       tags: create

     - name: Create the application based on a template
       command: oc new-app --file=templates/cfme-template.yaml --param=NAME=cloudforms --namespace {{ cloudforms_namespace }}
       tags: create

     - name: Remove the persistence volume from postgresql. It will be add that later.
       command: oc volume deploymentconfig/postgresql --name=cfme-pgdb-volume --remove --namespace {{ cloudforms_namespace }}
       tags: 
          - create
          - remove_persistence

     - name: Remove the persistence volume from cloudforms. It will be add that later.
       command: oc volume deploymentconfig/cloudforms --name=cfme-app-volume --remove --namespace {{ cloudforms_namespace }}
       tags:
          - create
          - remove_persistence

     - name: Remove current router
       command: oc delete route/cloudforms --namespace {{ cloudforms_namespace }}
       tags:
          - create
          - recreate_router

     - name: Create a friendly route cloudforms.{{ openshift_domain_cloudapps }}
       command: oc expose service/cloudforms --hostname=cloudforms.{{ openshift_domain_cloudapps }} --port=https --namespace {{ cloudforms_namespace }}
       tags:
          - create
          - recreate_router

     - name: Specify a Router Termination due SSL{{ ':' }} Passthrough
       command: oc patch route/cloudforms --patch='{"spec"{{ ':' }}{"tls"{{ ':' }}{"termination"{{ ':' }} "passthrough"}}}' --namespace {{ cloudforms_namespace }}
       tags:
          - create
          - recreate_router 
     
     - name: Fetch CloudForms Port
       command: oc get service/cloudforms --output jsonpath='{..spec.ports[?(@.name=="{{ cloudforms_http_type }}")].port}' --namespace {{ cloudforms_namespace }}
       register: cloudforms_port
       tags: 
          - install

     - name: Fetch CloudForms Address
       command: oc get service/cloudforms --output jsonpath='{..spec.clusterIP}' --namespace {{ cloudforms_namespace }}
       register: cloudforms_ip
       tags: 
          - install

     - name: Define CloudForms URL
       set_fact: cloudforms_url='cloudforms.{{ cloudforms_namespace }}.svc.cluster.local:{{ cloudforms_port.stdout }}'
       tags: 
          - install

     - name: Define CloudForms FULL URL
       set_fact: cloudforms_full_url='{{ cloudforms_http_type }}{{ ':' }}//{{ cloudforms_url }}'
       tags:
          - install

     - name: Wait for CloudForms to be up{{ ':' }} {{ cloudforms_full_url }}
       uri: url='{{ cloudforms_full_url }}' validate_certs=no status_code=200 
       register: cloudforms_wait
       until: cloudforms_wait.status == 200
       retries: 60
       delay: 10
       tags: 
          - install

     - name: Fetch a Token from Management Infrastructure
       command: oc serviceaccounts get-token management-admin --namespace management-infra
       register: management_infra_token
       tags: 
          - install

     - name: Submit a new Provider to CloudForms
       uri: method=POST body_format=json url="{{ cloudforms_full_url }}/api/providers"  status_code=200
            HEADER_Content-type="application/json" HEADER_Accept="application/json"
            user={{ cloudforms_username }} password={{ password }} force_basic_auth=yes validate_certs=no return_content=yes
            body="{ \"type\"      {{ ':' }} \"ManageIQ{{ ':' }}{{ ':' }}Providers{{ ':' }}{{ ':' }}Openshift{{ ':' }}{{ ':' }}ContainerManager\", \"name\"      {{ ':' }} \"OpenShift Container Platform 3.4\", \"hostname\"  {{ ':' }} \"{{ cloudforms_url }}\", \"ipaddress\" {{ ':' }} \"{{ cloudforms_ip.stdout }}\", \"credentials\" {{ ':' }} {  \"auth_key\"   {{ ':' }} \"{{ management_infra_token.stdout }}\"  } }"
       register: cloudforms_response
       tags: 
          - install
